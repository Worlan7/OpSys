Welcome to the XSSH Shell!

The XSSH Shell is a simple toy shell that has certain builtin functions, along with the ability to execute some external ones.
It is a toy shell in the sense that its behaviour is undefined for invalid input, so do take care while using it.

This shell has the following built in commands:

In the description below, W stands for a single word. A whitespace character (SPACE or TAB) or a
newline character terminates a word. ”...” indicates a continuation of 0 or more repetitions of the
preceding symbol. For example, ”W ...” means one or more W’s. I stands for a particular type of word
that is an integer. In cases where the ordinal position of a word is important, we will use W1, W2, ... to
mean Word1, Word2. Also, a word can be a variable and should be substituted as noted in the “Variable
Substitution” section below.

 show W … : display the word(s) followed by a newline
 set W1 W2: set the value of the local variable W1 to the value W2
 unset W1: un set a previously set local variable W1
 export W1 W2: export the global variable W1 with the value W2 to the environment
 unexport W: unexport the global variable W from the environment
 environ:  this command should display to the terminal a listing of all environment strings that
are currently defined
 chdir W: change the current directory  
 exit I: exit the shell and return status I.  If no value for I is given, the shell should exit with a
status code of 0. 
 wait I: the shell waits for process I (a pid) to complete. If I is ‐1, the shell waits for any children to
complete. Note that you can't wait on grandchildren.
 clr:  clear the screen and display a new command line prompt at the top
 dir:  list the contents of the current directory
 environ:  list all of the environment strings
 echo <comment>:  display <comment> on the display followed by a new line
 help:  display the user manual using the more filter
 pause:  pause the operation of the shell until the ‘Enter’ key is pressed
 history n:  this command should list to the display the last n executed commands (i.e., those
that you entered at the command line prompt, even if the command fails or can’t be found).  If
your shell executed less than n commands, then the shell will just display all of these.
 repeat:  prints to the screen, and then executes the command in the history list which
corresponds to the nth line.  If n is not specified, then repeat should execute the previous
command (i.e., the one which currently has the highest history list number).
 kill [‐n] pid:  this command should send a signal to the specified process.


This shell also supports the following:

Input redirection using ">" and "<"
Local variables
Background commands


